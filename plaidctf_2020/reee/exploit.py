from z3 import *

start_values = [0x48, 0x5f, 0x36, 0x35, 0x35, 0x25, \
0x14, 0x2c, 0x1d, 0x01, 0x03, 0x2d, 0x0c, 0x6f, \
0x35, 0x61, 0x7e, 0x34, 0x0a, 0x44, 0x24, 0x2c, \
0x4a, 0x46, 0x19, 0x59, 0x5b, 0x0e, 0x78, 0x74, \
0x29, 0x13, 0x2c]

print('[*] start_values len:' + str(len(start_values)))
print(start_values)

print('[*] flag: ')
flag = [BitVec('%i' %i, 8) for i in range(len(start_values))]
print(flag)

s = Solver()

s.add(flag[0] ==  ord('p')) 
s.add(flag[1] ==  ord('c')) 
s.add(flag[2] ==  ord('t')) 
s.add(flag[3] ==  ord('f')) 
s.add(flag[4] ==  ord('{')) 
s.add(flag[-1] == ord('}')) 

counter = 0
begin_P = 0x50
while (counter < 0x539):
	byte_flag = 0
	while (byte_flag < len(start_values)):
		flag[byte_flag] = flag[byte_flag] ^ begin_P
		begin_P = begin_P ^ flag[byte_flag]
		byte_flag = byte_flag + 1
	counter = counter + 1

for x, y in zip(flag, start_values):
	s.add(x == y)

print(s.check())
print(s.model())

m = s.model()

a = sorted([(d, m[d]) for d in m], key = lambda x: int(str(x[0])))
# print(a)

for x in range(len(start_values)):
	print(chr(int(str(a[x][1]))), end="")

'''
pctf{ok_nothing_too_fancy_there!}
'''
